name: MicroserviceDemo Build and Test

on: [push]

jobs:
  build:
    if: github.event_name == 'push'
    env:
      JOB_STATUS_UNIT: ok
      JOB_STATUS_SCA: ok
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.201
    #- name: Build with dotnet
    #  run: dotnet build ./MicroserviceDemo.sln --configuration Release
    #- name: Test with dotnet
    #  run: dotnet test ./MicroserviceDemo.sln --configuration Release
    - name: Build All
      run: .\build-all.ps1
      working-directory: .\build

    - name: Slack Notification for Unit Tests
      uses: bryan-nice/slack-notification@master
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SUBJE }}
        SLACK_TITLE: 'Failure'
        SLACK_MESSAGE: 'You cannot pass the tests... Check your unit tests! workflow: ${{ github.workflow }} run id: ${{ github.run_id	}}	'
      if: failure()
    - name: Set Unit Test Status
      id: unitslack 
      run: |
        echo "::set-output name=JOB_STATUS_UNIT::failed"
      if: failure()
    - name: Check outputs
      run: |
        echo "Pull Request Number - ${{ steps.test.outputs }}"
        echo "Pull Request Number - ${{ steps.unitslack.outputs.JOB_STATUS_UNIT }}"
        echo "Pull Request Number - $JOB_STATUS_UNIT"
      if: always()

    # SAST    

    #- name: Sonarcloud Step
      #run: |
        # verify sonar:sonar
    # SCA     
    - name: Snyk to check for vulnerabilities
      uses: snyk/actions/dotnet@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: monitor
        args: --severity-threshold=high
              --file=MicroserviceDemo.sln
    - name: Slack Notification for Snyk
      if: steps.unitslack.outputs.JOB_STATUS_UNIT != 'failed' && failure()
      uses: bryan-nice/slack-notification@master
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SUBJE }}
        SLACK_TITLE: 'Failure'
        SLACK_MESSAGE: 'You got an error during SCA Step, Snyk! workflow: ${{ github.workflow }} run id: ${{ github.run_id	}}	'

    # Connect to Azure Container registry (ACR)
    # test
    - uses: azure/docker-login@v1 
      with:
        login-server: subjedotnet.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME_SUBJE }} 
        password: ${{ secrets.REGISTRY_PASSWORD_SUBJE }}
    # Docker build and push to a Azure Container registry (ACR)
    - run: |
       docker build . -t subjedotnet.azurecr.io/dotnetdemo:${{ github.run_id }}
       docker push subjedotnet.azurecr.io/dotnetdemo:${{ github.run_id }}
    # Set the target AKS cluster.
    - name: Slack Notification for Build
      uses: bryan-nice/slack-notification@master
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SUBJE }}
        SLACK_TITLE: 'Build'
        SLACK_MESSAGE: 'Your build is completed! successfully pushed to repo subjedotnet.azurecr.io/dotnetdemo:${{ github.run_id }}'
  staging:
    # deploy to AKS
    if: github.run_id != 'refs/heads/master' &&  github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    steps:    
    # download binary
    - uses: actions/checkout@v2
    - uses: azure/aks-set-context@v1 
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS_SUBJE }}' 
        cluster-name: subjeakscluster
        resource-group: Subje-AKS-RG
    # Create imagepullsecret for Azure Container registry (ACR)
    - uses: azure/k8s-create-secret@v1 
      with:
        container-registry-url: subjedotnet.azurecr.io
        container-registry-username: ${{ secrets.REGISTRY_USERNAME_SUBJE }} 
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD_SUBJE }}
        secret-name: acr-secret
        namespace: dotnetappdemo
    # Deploy app to AKS
    - uses: azure/k8s-deploy@v1 
      with:
        namespace: dotnetappdemo
        manifests: |
          k8s
        images: |
          subjedotnet.azurecr.io/dotnetdemo:${{ github.run_id }} 
        imagepullsecrets: |
          acr-secret
          namespace: dotnetappdemo
    ## generating report and pull request
    - name: Slack Notification for Failure
      uses: bryan-nice/slack-notification@master
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SUBJE }}
        SLACK_TITLE: 'Failure'
        SLACK_MESSAGE: 'You got an error during staging deployment period! pr number: ${{ env.PULL_REQUEST }} workflow: ${{ github.workflow }} run id: ${{ github.run_id	}}'
      if: failure()
  # pull request job for staging    
  pull-request:
    if: github.run_id != 'refs/heads/dev' && github.run_id != 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: staging
    steps:
    - uses: actions/checkout@v1
    - name: pull-request
      uses: repo-sync/pull-request@v2
      with:
        source_branch: ""                     # If blank, default: triggered branch
        destination_branch: "dev"          # If blank, default: master
        pr_title: "Pulling ${{ github.run_id }} into dev"
        pr_body: ":crown: *An automated PR*"  # Full markdown support, requires pr_title to be set
        #pr_reviewer: "wei,worker"             # Comma-separated list (no spaces)
        #pr_assignee: "wei,worker"             # Comma-separated list (no spaces)
        pr_label: "auto-pr"                   # Comma-separated list (no spaces)
        #pr_milestone: "Milestone 1"           # Milestone name
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - name: Slack Notification for Staging
      uses: bryan-nice/slack-notification@master
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SUBJE }}
        SLACK_TITLE: 'Slack Notification for Staging'
        SLACK_MESSAGE: 'Your code is on staging! pr number: ${{ env.PULL_REQUEST_NUMBER }} workflow: ${{ github.workflow }} run id: ${{ github.run_id	}}'
  production:
    if: github.run_id == 'refs/heads/master' && github.event_name == 'push'
    # deploy to AKS
    needs: build
    runs-on: ubuntu-latest
    steps:    
    # download binary
    - uses: actions/checkout@v2
    # start AKS things
    - uses: azure/aks-set-context@v1 
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS_SUBJE }}' 
        cluster-name: subjeakscluster
        resource-group: Subje-AKS-RG
    # Create imagepullsecret for Azure Container registry (ACR)
    - uses: azure/k8s-create-secret@v1 
      with:
        container-registry-url: subjedotnet.azurecr.io
        container-registry-username: ${{ secrets.REGISTRY_USERNAME_SUBJE }} 
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD_SUBJE }}
        secret-name: acr-secret
        namespace: dotnetappdemo
    # Deploy app to AKS
    - uses: azure/k8s-deploy@v1 
      with:
        namespace: dotnetappdemo
        manifests: |
          k8s
        images: |
          subjedotnet.azurecr.io/dotnetdemo:${{ github.run_id }} 
        imagepullsecrets: |
          acr-secret
          namespace: dotnetappdemo    
    - name: Slack Notification for Failure
      uses: bryan-nice/slack-notification@master
      env:

        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SUBJE }}
        SLACK_TITLE: 'Failure'
        SLACK_MESSAGE: 'You got an error during production deployment period! pr number: ${{ env.PULL_REQUEST }} workflow: ${{ github.workflow }} run id: ${{ github.run_id	}}'
      if: failure()

  pr_for_master:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest  
    
    steps:  
    - uses: actions/checkout@v2
    - name: Go to new branch
      run: |
        git checkout -b step
    - name: pull-request
      uses: repo-sync/pull-request@v2
      with:
        source_branch: "dev"                     # If blank, default: triggered branch
        destination_branch: "master"          # If blank, default: master
        pr_title: "Pulling ${{ github.run_id }} into dev"
        pr_body: ":crown: *An automated PR*"  # Full markdown support, requires pr_title to be set
        pr_label: "auto-pr"                   # Comma-separated list (no spaces)
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - name: Slack Notification for master pr
      uses: bryan-nice/slack-notification@master
      env:

        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SUBJE }}
        SLACK_TITLE: 'Auto-PR for Master'
        SLACK_MESSAGE: 'PR, dev to master is created! pr number: ${{ env.PULL_REQUEST }} workflow: ${{ github.workflow }} run id: ${{ github.run_id	}}'